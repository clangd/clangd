{"version":3,"sources":["../src/index.js"],"names":["owner","name","token","after","Error","response","getCommitsInfo","parsed","parseResponse","commit","getLastSuccessfulCommit","graphqlEndpoint","post","query","createQuery","headers","Authorization","history","data","repository","ref","target","hasNextPage","pageInfo","endCursor","findSuccessCommit","edges","node","status","state"],"mappings":";;;;;;;;+BAKA,WAAuC,EAAEA,KAAF,EAASC,IAAT,EAAeC,KAAf,EAAsBC,KAAtB,KAAgC,EAAvE,EAA2E;AACzE,QAAI,CAACH,KAAL,EAAY;AACV,YAAM,IAAII,KAAJ,CAAU,6BAAV,CAAN;AACD;AACD,QAAI,CAACH,IAAL,EAAW;AACT,YAAM,IAAIG,KAAJ,CAAU,4BAAV,CAAN;AACD;AACD,QAAI,CAACF,KAAL,EAAY;AACV,YAAM,IAAIE,KAAJ,CAAU,6BAAV,CAAN;AACD;;AAED,UAAMC,WAAW,MAAMC,eAAe,EAAEN,KAAF,EAASC,IAAT,EAAeC,KAAf,EAAsBC,KAAtB,EAAf,CAAvB;AACA,UAAMI,SAASC,cAAcH,QAAd,CAAf;;AAEA,QAAIE,OAAOE,MAAX,EAAmB;AACjB,aAAOF,OAAOE,MAAd;AACD;;AAED,QAAIF,OAAOJ,KAAX,EAAkB;AAChB,aAAOO,wBAAwB,EAAEV,KAAF,EAASC,IAAT,EAAeC,KAAf,EAAsBC,OAAOI,OAAOJ,KAApC,EAAxB,CAAP;AACD;;AAED,WAAO,IAAP;AACD,G;;kBAvBcO,uB;;;;;AALf;;;;;;;;kBAEeA,uB;AACR,MAAMC,4CAAkB,gCAAxB;;AA2BP,SAASL,cAAT,CAAwB,EAAEN,KAAF,EAASC,IAAT,EAAeC,KAAf,EAAsBC,QAAQ,IAA9B,EAAxB,EAA8D;AAC5D,SAAO,gBAAMS,IAAN,CACLD,eADK,EAEL;AACEE,WAAOC,YAAYd,KAAZ,EAAmBC,IAAnB,EAAyBE,KAAzB;AADT,GAFK,EAKL;AACEY,aAAS;AACPC,qBAAgB,UAASd,KAAM;AADxB;AADX,GALK,CAAP;AAWD;;AAED,SAASY,WAAT,CAAqBd,KAArB,EAA4BC,IAA5B,EAAkCE,KAAlC,EAAyC;AACvC,QAAMU,QAAS;;2BAEUb,KAAM,aAAYC,IAAK;;;;iCAIjBE,QAAS,aAAYA,KAAM,GAA3B,GAAgC,EAAG;;;;;;;;;;;;;;;;;;;;GANlE;;AA4BA,SAAOU,KAAP;AACD;;AAED,SAASL,aAAT,CAAuBH,QAAvB,EAAiC;AAC/B,QAAMY,UAAUZ,SAASa,IAAT,CAAcA,IAAd,CAAmBC,UAAnB,CAA8BC,GAA9B,CAAkCC,MAAlC,CAAyCJ,OAAzD;AACA,QAAMK,cAAcL,QAAQM,QAAR,CAAiBD,WAArC;AACA,QAAMnB,QAAQc,QAAQM,QAAR,CAAiBC,SAA/B;AACA,QAAMf,SAASgB,kBAAkBR,QAAQS,KAA1B,CAAf;;AAEA,MAAIjB,MAAJ,EAAY;AACV,WAAO,EAAEA,MAAF,EAAUN,OAAO,IAAjB,EAAP;AACD;;AAED,MAAImB,eAAenB,KAAnB,EAA0B;AACxB,WAAO,EAAEM,QAAQ,IAAV,EAAgBN,KAAhB,EAAP;AACD;;AAED,SAAO,EAAEM,QAAQ,IAAV,EAAgBN,OAAO,IAAvB,EAAP;AACD;;AAED,SAASsB,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC;AACA,OAAK,MAAMjB,MAAX,IAAqBiB,KAArB,EAA4B;AAC1B,QAAIjB,OAAOkB,IAAP,CAAYC,MAAZ,IAAsBnB,OAAOkB,IAAP,CAAYC,MAAZ,CAAmBC,KAAnB,KAA6B,SAAvD,EAAkE;AAChE,aAAOpB,MAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD","file":"index.js","sourcesContent":["import axios from 'axios';\n\nexport default getLastSuccessfulCommit;\nexport const graphqlEndpoint = 'https://api.github.com/graphql';\n\nasync function getLastSuccessfulCommit({ owner, name, token, after } = {}) {\n  if (!owner) {\n    throw new Error('\"owner\" needs to be defined');\n  }\n  if (!name) {\n    throw new Error('\"name\" needs to be defined');\n  }\n  if (!token) {\n    throw new Error('\"token\" needs to be defined');\n  }\n\n  const response = await getCommitsInfo({ owner, name, token, after });\n  const parsed = parseResponse(response);\n\n  if (parsed.commit) {\n    return parsed.commit;\n  }\n\n  if (parsed.after) {\n    return getLastSuccessfulCommit({ owner, name, token, after: parsed.after });\n  }\n\n  return null;\n}\n\nfunction getCommitsInfo({ owner, name, token, after = null }) {\n  return axios.post(\n    graphqlEndpoint,\n    {\n      query: createQuery(owner, name, after)\n    },\n    {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }\n  );\n}\n\nfunction createQuery(owner, name, after) {\n  const query = `\n    query {\n      repository(owner: \"${owner}\", name: \"${name}\") {\n        ref(qualifiedName: \"master\") {\n          target {\n            ... on Commit {\n              history(first: 10${after ? `, after: \"${after}\"` : ''}) {\n                pageInfo {\n                  hasNextPage\n                  endCursor\n                }\n                edges {\n                  node {\n                    status {\n                      state\n                    }\n                    message\n                    oid\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  return query;\n}\n\nfunction parseResponse(response) {\n  const history = response.data.data.repository.ref.target.history;\n  const hasNextPage = history.pageInfo.hasNextPage;\n  const after = history.pageInfo.endCursor;\n  const commit = findSuccessCommit(history.edges);\n\n  if (commit) {\n    return { commit, after: null };\n  }\n\n  if (hasNextPage && after) {\n    return { commit: null, after };\n  }\n\n  return { commit: null, after: null };\n}\n\nfunction findSuccessCommit(edges) {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const commit of edges) {\n    if (commit.node.status && commit.node.status.state === 'SUCCESS') {\n      return commit;\n    }\n  }\n\n  return null;\n}\n"]}